[debug] Created tunnel using local port: '45391'

[debug] SERVER: "127.0.0.1:45391"

[debug] Original chart version: ""
[debug] CHART PATH: /home/matt/go/src/k8s.io/charts/incubator/zookeeper

NAME:   calico-dachshund
REVISION: 1
RELEASED: Sat Jun  2 14:59:02 2018
CHART: zookeeper-1.0.0
USER-SUPPLIED VALUES:
{}

COMPUTED VALUES:
affinity: {}
env:
  JMXAUTH: "false"
  JMXDISABLE: "false"
  JMXPORT: 1099
  JMXSSL: "false"
  ZK_CLIENT_PORT: 2181
  ZK_ELECTION_PORT: 3888
  ZK_HEAP_SIZE: 2G
  ZK_INIT_LIMIT: 5
  ZK_LOG_LEVEL: INFO
  ZK_MAX_CLIENT_CNXNS: 60
  ZK_MAX_SESSION_TIMEOUT: 40000
  ZK_MIN_SESSION_TIMEOUT: 4000
  ZK_PURGE_INTERVAL: 0
  ZK_SERVER_PORT: 2888
  ZK_SNAP_RETAIN_COUNT: 3
  ZK_SYNC_LIMIT: 10
  ZK_TICK_TIME: 2000
exporters:
  jmx:
    config:
      lowercaseOutputName: false
      rules:
      - name: zookeeper_$2
        pattern: org.apache.ZooKeeperService<name0=ReplicatedServer_id(\d+)><>(\w+)
      - labels:
          replicaId: $2
        name: zookeeper_$3
        pattern: org.apache.ZooKeeperService<name0=ReplicatedServer_id(\d+), name1=replica.(\d+)><>(\w+)
      - labels:
          memberType: $3
          replicaId: $2
        name: zookeeper_$4
        pattern: org.apache.ZooKeeperService<name0=ReplicatedServer_id(\d+), name1=replica.(\d+),
          name2=(\w+)><>(\w+)
      - labels:
          memberType: $3
          replicaId: $2
        name: zookeeper_$4_$5
        pattern: org.apache.ZooKeeperService<name0=ReplicatedServer_id(\d+), name1=replica.(\d+),
          name2=(\w+), name3=(\w+)><>(\w+)
      startDelaySeconds: 30
    enabled: false
    env: {}
    image:
      pullPolicy: IfNotPresent
      repository: sscaling/jmx-prometheus-exporter
      tag: 0.3.0
    livenessProbe:
      failureThreshold: 8
      httpGet:
        path: /metrics
        port: jmxxp
      initialDelaySeconds: 30
      periodSeconds: 15
      successThreshold: 1
      timeoutSeconds: 60
    path: /metrics
    ports:
      jmxxp:
        containerPort: 9404
        protocol: TCP
    readinessProbe:
      failureThreshold: 8
      httpGet:
        path: /metrics
        port: jmxxp
      initialDelaySeconds: 30
      periodSeconds: 15
      successThreshold: 1
      timeoutSeconds: 60
    resources: {}
  zookeeper:
    config:
      logLevel: info
      resetOnScrape: "true"
    enabled: false
    env: {}
    image:
      pullPolicy: IfNotPresent
      repository: josdotso/zookeeper-exporter
      tag: v1.1.2
    livenessProbe:
      failureThreshold: 8
      httpGet:
        path: /metrics
        port: zookeeperxp
      initialDelaySeconds: 30
      periodSeconds: 15
      successThreshold: 1
      timeoutSeconds: 60
    path: /metrics
    ports:
      zookeeperxp:
        containerPort: 9141
        protocol: TCP
    readinessProbe:
      failureThreshold: 8
      httpGet:
        path: /metrics
        port: zookeeperxp
      initialDelaySeconds: 30
      periodSeconds: 15
      successThreshold: 1
      timeoutSeconds: 60
    resources: {}
image:
  pullPolicy: IfNotPresent
  repository: gcr.io/google_samples/k8szk
  tag: v3
jobs:
  chroots:
    activeDeadlineSeconds: 300
    backoffLimit: 5
    completions: 1
    config:
      create: []
    enabled: false
    env: []
    parallelism: 1
    resources: {}
    restartPolicy: Never
livenessProbe:
  exec:
    command:
    - zkOk.sh
  initialDelaySeconds: 20
nodeSelector: {}
persistence:
  accessMode: ReadWriteOnce
  enabled: true
  size: 5Gi
podAnnotations: {}
podDisruptionBudget:
  maxUnavailable: 1
podLabels: {}
ports:
  client:
    containerPort: 2181
    protocol: TCP
  election:
    containerPort: 3888
    protocol: TCP
  server:
    containerPort: 2888
    protocol: TCP
readinessProbe:
  exec:
    command:
    - zkOk.sh
  initialDelaySeconds: 20
replicaCount: 3
resources: {}
securityContext:
  fsGroup: 1000
  runAsUser: 1000
service:
  annotations: {}
  ports:
    client:
      port: 2181
      protocol: TCP
      targetPort: client
  type: ClusterIP
terminationGracePeriodSeconds: 1800
tolerations: []
updateStrategy:
  type: OnDelete

HOOKS:
MANIFEST:

---
# Source: zookeeper/templates/service-headless.yaml
apiVersion: v1
kind: Service
metadata:
  name: calico-dachshund-zookeeper-headless
  labels:
    app: zookeeper
    chart: zookeeper-1.0.0
    release: calico-dachshund
    heritage: Tiller
spec:
  clusterIP: None
  ports:
    - name: client
      port: 2181
      targetPort: 
      protocol: TCP
    - name: election
      port: 3888
      targetPort: 
      protocol: TCP
    - name: server
      port: 2888
      targetPort: 
      protocol: TCP
  selector:
    app: zookeeper
    release: calico-dachshund
---
# Source: zookeeper/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: calico-dachshund-zookeeper
  labels:
    app: zookeeper
    chart: zookeeper-1.0.0
    release: calico-dachshund
    heritage: Tiller
  annotations:
spec:
  type: ClusterIP
  ports:
    - name: client
      port: 2181
      protocol: TCP
      targetPort: client
      
  selector:
    app: zookeeper
    release: calico-dachshund
---
# Source: zookeeper/templates/statefulset.yaml
apiVersion: apps/v1beta1
kind: StatefulSet
metadata:
  name: calico-dachshund-zookeeper
  labels:
    app: zookeeper
    chart: zookeeper-1.0.0
    release: calico-dachshund
    heritage: Tiller
    component: server
spec:
  serviceName: calico-dachshund-zookeeper-headless
  replicas: 3
  terminationGracePeriodSeconds: 1800
  selector:
    matchLabels:
      app: zookeeper
      release: calico-dachshund
      component: server
  updateStrategy:
    type: OnDelete
    
  template:
    metadata:
      labels:
        app: zookeeper
        release: calico-dachshund
        component: server
      annotations:
    spec:
      securityContext:
        fsGroup: 1000
        runAsUser: 1000
        
      containers:

        - name: zookeeper
          image: "gcr.io/google_samples/k8szk:v3"
          imagePullPolicy: IfNotPresent
          command:
            - /bin/bash
            - -xec
            - zkGenConfig.sh && exec zkServer.sh start-foreground
          ports:
            - name: client
              containerPort: 2181
              protocol: TCP
              
            - name: election
              containerPort: 3888
              protocol: TCP
              
            - name: server
              containerPort: 2888
              protocol: TCP
              
          livenessProbe:
            exec:
              command:
              - zkOk.sh
            initialDelaySeconds: 20
            
          readinessProbe:
            exec:
              command:
              - zkOk.sh
            initialDelaySeconds: 20
            
          env:
            - name: ZK_REPLICAS
              value: "3"
            - name: JMXAUTH
              value: "false"
            - name: JMXDISABLE
              value: "false"
            - name: JMXPORT
              value: "1099"
            - name: JMXSSL
              value: "false"
            - name: ZK_CLIENT_PORT
              value: "2181"
            - name: ZK_ELECTION_PORT
              value: "3888"
            - name: ZK_HEAP_SIZE
              value: "2G"
            - name: ZK_INIT_LIMIT
              value: "5"
            - name: ZK_LOG_LEVEL
              value: "INFO"
            - name: ZK_MAX_CLIENT_CNXNS
              value: "60"
            - name: ZK_MAX_SESSION_TIMEOUT
              value: "40000"
            - name: ZK_MIN_SESSION_TIMEOUT
              value: "4000"
            - name: ZK_PURGE_INTERVAL
              value: "0"
            - name: ZK_SERVER_PORT
              value: "2888"
            - name: ZK_SNAP_RETAIN_COUNT
              value: "3"
            - name: ZK_SYNC_LIMIT
              value: "10"
            - name: ZK_TICK_TIME
              value: "2000"
          resources:
            {}
            
          volumeMounts:
            - name: data
              mountPath: /var/lib/zookeeper

  volumeClaimTemplates:
    - metadata:
        name: data
      spec:
        accessModes:
          - "ReadWriteOnce"
        resources:
          requests:
            storage: "5Gi"
---
# Source: zookeeper/templates/poddisruptionbudget.yaml
apiVersion: policy/v1beta1
kind: PodDisruptionBudget
metadata:
  name: calico-dachshund-zookeeper
  labels:
    app: zookeeper
    chart: zookeeper-1.0.0
    release: calico-dachshund
    heritage: Tiller
    component: server
spec:
  selector:
    matchLabels:
      app: zookeeper
      release: calico-dachshund
      component: server
  maxUnavailable: 1
