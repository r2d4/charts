
---
# Source: gocd/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: joking-gopher-gocd
  labels:
    app: gocd
    chart: "gocd-1.0.8"
    release: "joking-gopher"
    heritage: "Tiller"
data:
  preconfigure_server.sh: |-
    #!/bin/bash

    SERVICE_ACCOUNT_PATH=/var/run/secrets/kubernetes.io/serviceaccount
    KUBE_TOKEN=$(<${SERVICE_ACCOUNT_PATH}/token)

    while true
    do
      status_code=$(curl 'http://localhost:8153/go/api/v1/health' -o /dev/null -w "%{http_code}")
      if [ $status_code == 200 ]; then
        break
      fi
      sleep 10
    done

    set -e

    echo "Trying to create an elastic profile now." >> /godata/logs/preconfigure.log

    (curl --fail -i 'http://localhost:8153/go/api/elastic/profiles' \
      -H 'Accept: application/vnd.go.cd.v1+json' \
      -H 'Content-Type: application/json' \
      -X POST -d '{
        "id": "demo-app",
        "plugin_id": "cd.go.contrib.elasticagent.kubernetes",
        "properties": [
          {
            "key": "Image",
            "value": "gocd/gocd-agent-docker-dind:v18.2.0"
          },
          {
            "key": "PodConfiguration",
            "value": "apiVersion: v1\nkind: Pod\nmetadata:\n  name: pod-name-prefix-{\{ POD_POSTFIX }\}\n  labels:\n    app: web\nspec:\n  containers:\n    - name: gocd-agent-container-{\{ CONTAINER_POSTFIX }\}\n      image: {\{ GOCD_AGENT_IMAGE }\}:{\{ LATEST_VERSION }\}\n      securityContext:\n        privileged: true"
          },
          {
            "key": "SpecifiedUsingPodConfiguration",
            "value": "false"
          },
          {
            "key": "Privileged",
            "value": "true"
          }
        ]
      }' >> /godata/logs/preconfigure.log)

    echo "Trying to configure plugin settings." >> /godata/logs/preconfigure.log

    (curl --fail -i 'http://localhost:8153/go/api/admin/plugin_settings' \
      -H 'Accept: application/vnd.go.cd.v1+json' \
      -H 'Content-Type: application/json' \
      -X POST -d '{
        "plugin_id": "cd.go.contrib.elasticagent.kubernetes",
        "configuration": [
          {
            "key": "go_server_url",
            "value": "https://joking-gopher-gocd-server:8154/go"
          },
          {
            "key": "kubernetes_cluster_url",
            "value": "https://'$KUBERNETES_SERVICE_HOST':'$KUBERNETES_SERVICE_PORT_HTTPS'"
          },
          {
            "key": "namespace",
            "value": "default"
          },
          {
            "key": "security_token",
            "value": "'$KUBE_TOKEN'"
          }
        ]
      }' >> /godata/logs/preconfigure.log)

    echo "Trying to creating a hello world pipeline." >> /godata/logs/preconfigure.log

    (curl --fail -i 'http://localhost:8153/go/api/admin/pipelines' \
      -H 'Accept: application/vnd.go.cd.v5+json' \
      -H 'Content-Type: application/json' \
      -X POST -d '{ "group": "sample",
                    "pipeline": {
                      "label_template": "${COUNT}",
                      "name": "hello_world",
                      "materials": [
                        {
                          "type": "git",
                          "attributes": {
                            "url": "https://github.com/gocd-contrib/getting-started-repo",
                            "shallow_clone": true
                          }
                        }
                      ],
                      "stages": [
                        {
                          "name": "default_stage",
                          "jobs": [
                            {
                              "name": "default_job",
                              "elastic_profile_id": "demo-app",
                              "tasks": [
                                {
                                  "type": "exec",
                                  "attributes": {
                                    "command": "echo",
                                    "arguments": [
                                      "Hello World"
                                    ]
                                  }
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  }' >> /godata/logs/preconfigure.log )

    echo "Unpausing the pipeline." >> /godata/logs/preconfigure.log

    (curl --fail -i 'http://localhost:8153/go/api/pipelines/hello_world/unpause' \
           -H 'Accept: application/vnd.go.cd.v1+json' \
           -H 'X-GoCD-Confirm: true' \
           -X POST >> /godata/logs/preconfigure.log)

    echo "Done preconfiguring the GoCD server" >> /godata/logs/preconfigure.log
---
# Source: gocd/templates/test-config.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: joking-gopher-gocd-tests
  labels:
    app: gocd
    chart: "gocd-1.0.8"
    release: "joking-gopher"
    heritage: "Tiller"
data:
  run.sh: |-
    @test "Testing GoCD UI is accessible" {
        curl --connect-timeout 10 --retry 12 --retry-delay 10 --retry-max-time 90 "http://joking-gopher-gocd-server:8153/go/auth/login"
    }

    @test "Testing GoCD application is accessible through service" {
      curl --retry 2 --retry-delay 10 --retry-max-time 90 http://joking-gopher-gocd-server:8153/go
    }
---
# Source: gocd/templates/gocd-server-pvc.yaml
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: joking-gopher-gocd-server
  labels:
    app: gocd
    chart: "gocd-1.0.8"
    release: "joking-gopher"
    heritage: "Tiller"
    component: server
spec:
  accessModes:
    - "ReadWriteOnce"
  resources:
    requests:
      storage: "2Gi"
---
# Source: gocd/templates/gocd-ea-service-account.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: joking-gopher-gocd
  labels:
    chart: "gocd-1.0.8"
    app: "gocd"
    heritage: "Tiller"
    release: "joking-gopher"
---
# Source: gocd/templates/gocd-ea-cluster-role.yaml
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRole
metadata:
  name: joking-gopher-gocd
  labels:
    chart: "gocd-1.0.8"
    app: "gocd"
    heritage: "Tiller"
    release: "joking-gopher"
rules:
- apiGroups: [""]
  resources:
  - pods
  - pods/log
  verbs: ["*"]
- apiGroups: [""]
  resources:
  - nodes
  verbs: ["get", "list"]
- apiGroups: [""]
  resources:
  - events
  verbs: ["list", "watch"]
- apiGroups: [""]
  resources:
  - namespaces
  verbs: ["list", "get"]
---
# Source: gocd/templates/gocd-ea-cluster-role-binding.yaml
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRoleBinding
metadata:
  name: joking-gopher-gocd
  labels:
    chart: "gocd-1.0.8"
    app: "gocd"
    heritage: "Tiller"
    release: "joking-gopher"
subjects:
- kind: ServiceAccount
  name: joking-gopher-gocd
  namespace: default
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: joking-gopher-gocd
---
# Source: gocd/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: joking-gopher-gocd-server
  annotations:
  labels:
    app: gocd
    chart: "gocd-1.0.8"
    release: "joking-gopher"
    heritage: "Tiller"
    component: server
spec:
  type: NodePort
  ports:
    - port: 8153
      targetPort: 8153
      protocol: TCP
      name: http

    - port: 8154
      targetPort: 8154
      protocol: TCP
      name: https
  selector:
    app: gocd
    release: "joking-gopher"
    component: server
---
# Source: gocd/templates/gocd-agent-deployment.yaml
apiVersion: apps/v1beta2
kind: Deployment
metadata:
  name: joking-gopher-gocd-agent
  labels:
    app: gocd
    chart:  "gocd-1.0.8"
    release: "joking-gopher"
    heritage: "Tiller"
    component: agent
spec:
  replicas: 0
  selector:
    matchLabels:
      app: gocd
      release: "joking-gopher"
      component: agent
  template:
    metadata:
      labels:
        app: gocd
        release: "joking-gopher"
        component: agent
    spec:
      containers:
        - name: gocd-agent
          image: "gocd/gocd-agent-alpine-3.6:v18.5.0"
          imagePullPolicy: IfNotPresent
          resources:
            {}
            
          env:
            - name: GO_SERVER_URL
              value: "https://joking-gopher-gocd-server:8154/go"
---
# Source: gocd/templates/gocd-server-deployment.yaml
apiVersion: apps/v1beta2
kind: Deployment
metadata:
  name: joking-gopher-gocd-server
  labels:
    app: gocd
    chart: "gocd-1.0.8"
    release: "joking-gopher"
    heritage: "Tiller"
    component: server
spec:
  replicas: 1
  strategy:
    type: Recreate
  selector:
    matchLabels:
      app: gocd
      release: "joking-gopher"
      component: server
  template:
    metadata:
      labels:
        app: gocd
        release: "joking-gopher"
        component: server
    spec:
      serviceAccountName: joking-gopher-gocd
      volumes:
        - name: goserver-vol
          persistentVolumeClaim:
            claimName: joking-gopher-gocd-server
        - name: config-vol
          configMap:
            name: joking-gopher-gocd
      containers:
        - name: gocd-server
          image: "gocd/gocd-server:v18.5.0"
          imagePullPolicy: IfNotPresent
          env:
            - name: GOCD_PLUGIN_INSTALL_kubernetes-elastic-agents
              value: https://github.com/gocd/kubernetes-elastic-agents/releases/download/v1.0.1/kubernetes-elastic-agent-1.0.1-107.jar
            
          ports:
            - containerPort: 8153
            - containerPort: 8154
          livenessProbe:
            httpGet:
              path: /go/api/v1/health
              port: 8153
            initialDelaySeconds: 90
            periodSeconds: 15
            failureThreshold: 10
          readinessProbe:
            httpGet:
              path: /go/api/v1/health
              port: 8153
            initialDelaySeconds: 90
            periodSeconds: 15
            failureThreshold: 10
          volumeMounts:
            - name: goserver-vol
              mountPath: /godata
              subPath: godata
            - name: goserver-vol
              mountPath: /home/go
              subPath: homego
            - name: goserver-vol
              mountPath: /docker-entrypoint.d
              subPath: scripts
            - name: config-vol
              mountPath: /preconfigure_server.sh
              subPath: preconfigure_server.sh
          lifecycle:
            postStart:
              exec:
                command: ["/bin/bash","/preconfigure_server.sh"]
          resources:
            {}
---
# Source: gocd/templates/ingress.yaml
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  name: joking-gopher-gocd-server
  labels:
    app: gocd
    chart: "gocd-1.0.8"
    release: "joking-gopher"
    heritage: "Tiller"
    component: server
  annotations:
spec:
  backend:
    serviceName: joking-gopher-gocd-server
    servicePort: 8153
  rules:
